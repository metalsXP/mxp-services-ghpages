"use strict";(self.webpackChunkubc_services=self.webpackChunkubc_services||[]).push([[6795],{14455:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/image_001-d29502e8d085ef259f37974ddab70d68.png"},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var i=s(96540);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},42789:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/image_003-2b54af94f6959d38c8bc213f5a471a0a.png"},87168:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"BO/documentation","title":"UBC Business objects (UBC.bo)","description":"Intro","source":"@site/docs/products/UBC/BO/documentation.md","sourceDirName":"BO","slug":"/BO/documentation","permalink":"/products/UBC/BO/documentation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ubc","previous":{"title":"Mapping framework (UBC.map)","permalink":"/products/UBC/MAP/documentation"},"next":{"title":"IDOC integration (UBC.idoc)","permalink":"/products/UBC/IDOC/documentation"}}');var t=s(74848),o=s(28453);const r={},a="UBC Business objects (UBC.bo)",c={},d=[{value:"Intro",id:"intro",level:2},{value:"Business Object",id:"business-object",level:2},{value:"Attributes",id:"attributes",level:3},{value:"IDOC message types",id:"idoc-message-types",level:3},{value:"Implementation",id:"implementation",level:3},{value:"Mapping of Data",id:"mapping-of-data",level:4},{value:"Proxy",id:"proxy",level:2},{value:"Standard I/O interfaces",id:"standard-io-interfaces",level:2},{value:"Inbound \u2013 UBC_IN",id:"inbound--ubc_in",level:3},{value:"Outbound \u2013 UBC_OUT",id:"outbound--ubc_out",level:3},{value:"Inbound Message Status \u2013 UBC_MSG_ST",id:"inbound-message-status--ubc_msg_st",level:3},{value:"Outbound Message Status \u2013 UBC_STATUS_OUT",id:"outbound-message-status--ubc_status_out",level:3},{value:"Standard Workflows",id:"standard-workflows",level:2},{value:"Inbound",id:"inbound",level:3},{value:"Outbound",id:"outbound",level:3},{value:"Standard REST interfaces",id:"standard-rest-interfaces",level:2},{value:"Proxy configuration <code>/ubc/proxies</code>",id:"proxy-configuration-ubcproxies",level:3},{value:"Business Objects Model <code>/ubc/business_object_models/{type}/{type_version}</code>",id:"business-objects-model-ubcbusiness_object_modelstypetype_version",level:3},{value:"Business objects <code>/ubc/business_objects</code>",id:"business-objects-ubcbusiness_objects",level:3},{value:"Data Archiving",id:"data-archiving",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"ubc-business-objects-ubcbo",children:"UBC Business objects (UBC.bo)"})}),"\n",(0,t.jsx)(n.h2,{id:"intro",children:"Intro"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"UBC.bo"})," and its Object defintion is the basis and cross-link to ensure access to the SAP standard or custom objects. General customizing is available through ",(0,t.jsx)(n.strong,{children:"SAP Reference IMG -> Cross Application Components -> Unified Backend Connector (UBC)"})," or \u2013 as a shortcut \u2013 transaction ",(0,t.jsx)(n.code,{children:"/UBC/CUSTOMIZING"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"business-object",children:"Business Object"}),"\n",(0,t.jsxs)(n.p,{children:['The so called "business object" within UBC is the nexus for all areas. All logics will be defined at the business object level. A business object itself is customizable and can be defined completely free.\nTo do so, go to section ',(0,t.jsx)(n.strong,{children:"Business object configuration"}),".\n",(0,t.jsx)(n.img,{alt:"Object definition in customizing",src:s(42789).A+"",width:"360",height:"152"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Object type"}),"\nFirst, the type of object can be defined completely free. It has to be unique within the system/client, normally depending on the object and mirroring the use case it is applied for."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Version"}),"\nObject types can be versioned, but this is rather for internal reasons. This mechanism is needed for structural changes, e.g., type change from IDOC ",(0,t.jsx)(n.code,{children:"ORDERS03"})," -> ",(0,t.jsx)(n.code,{children:"ORDERS05"}),". In UBC, always the last versions are considered for the determination of object types by some attributes (like IDOCs basic type, extension, message type), but it ensures to have previous versions still available and active!"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Category"}),'\nChoose the object category wether it is a freestlye own or has own "determination" by some attributes, like IDOC for message type/basic type/extension. If not needed, choose "freestyle"']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Handler"}),"\nAn Object is assigned to a handler implementation which controls all the integration aspects (like type definition, standard handling for outbound/inbound). Every handler class must at least implement interface ",(0,t.jsx)(n.code,{children:"/UBC/IF_BO"})," and can extend ",(0,t.jsx)(n.code,{children:"/UBC/CL_BO"})," (generic, abstract superclass)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"IDOC Basic type / extension"}),"\nIf the object is an IDOC (see ",(0,t.jsx)(n.a,{href:"/products/UBC/IDOC/documentation",children:"UBC.idoc"}),"), you can specify the IDOC related fields.","\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["make sure your handler implements ",(0,t.jsx)(n.code,{children:"/UBC/IF_BO_IDOC"})]})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Object type and Path to ID"}),"\nIf the object type corresponds to an SAP standard object, the object type has to be specified. It is required in order to attach the workflows/messages to the SAP standard object via GOS (Generic Object Services). (see ",(0,t.jsx)(n.a,{href:"/products/UBC/FLOW/documentation",children:"UBC.flow"}),")\nFor getting all the started workflows for a specific Id, the mapping path to object id within payload of the object itself is to be specified by using dot notation adding possibilities for substring extraction. Example: ",(0,t.jsx)(n.code,{children:"header.id"})," extracts the content out of field ",(0,t.jsx)(n.code,{children:"id"})," within structure ",(0,t.jsx)(n.code,{children:"header"})," in payload and uses it as an Object Id to fetch business objects with the specified type and id. Please also refer to the field mapping of ",(0,t.jsx)(n.a,{href:"/products/UBC/IO/documentation",children:"UBC.io"}),", as all the mapping possibilities, like substring, tablea access, can used here too."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"attributes",children:"Attributes"}),"\n",(0,t.jsxs)(n.p,{children:["New attributes can be defined in ",(0,t.jsx)(n.strong,{children:"Business object attribute configuration"}),". Then, newly defined attributes can be applied to a custom business object in view cluster of Obect configuration ",(0,t.jsx)(n.strong,{children:"Attributes"}),'. It can be seen as a freely definable list of "key-value" pairs for a specific business object to apply logic for. E.g. for custom determination of an object type based on specific attributes or further configuring the object without changing implementation. You can make use of services from ',(0,t.jsx)(n.code,{children:"/UBC/CL_CONFIGURATION"})," to read object attributes within your object implementation."]}),"\n",(0,t.jsx)(n.h3,{id:"idoc-message-types",children:"IDOC message types"}),"\n",(0,t.jsx)(n.p,{children:"Assign IDOC message types in combination to IDOC basic type and extension on business object level. It is needed for determination of the UBC business object type from a IDOC as a basis."}),"\n",(0,t.jsx)(n.h3,{id:"implementation",children:"Implementation"}),"\n",(0,t.jsxs)(n.p,{children:["A business object has its own model and implements inbound/outbound logic. All methods needed for a valid implementation of a business object are abstract. As described, e.g. an IDOC business object inherits from ",(0,t.jsx)(n.code,{children:"/UBC/CL_BO_IDOC"}),', all mandatory logic is already implemented in a generic way. For "freestyle" business objects, inherit from ',(0,t.jsx)(n.code,{children:"/UBC/CL_BO"})," and implement the following:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Define the object structure by implementing the method ",(0,t.jsx)(n.code,{children:"CREATE_TYPE"}),". It can be a reference to DDIC/class type/... Make sure to create a new one and do not use a reference to a local variable as it will be automatically garbage collected. Example: ",(0,t.jsx)(n.code,{children:"rr_data = new mara( )."})]}),"\n",(0,t.jsxs)(n.li,{children:["Implement ",(0,t.jsx)(n.code,{children:"PROCESS_INBOUND_BO"})," if you are using Inbound process and process the given payload. If any object was created or changed, specify ",(0,t.jsx)(n.code,{children:"ET_RESULT-OBJECT_KEY"})," and ",(0,t.jsx)(n.code,{children:"ET_RESULT-OBJECT_TYPE"})," with the info about the standard objects. This is needed to save an object connection ID, show the workflow in GOS for the specific objects and offer jumping routines.\nSince the outbound process is always triggered by an external caller (custom program, IDOC Port function), there is no need to implement any custom logic for transmitting object data."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"mapping-of-data",children:"Mapping of Data"}),"\n",(0,t.jsxs)(n.p,{children:["While triggering in-/outbound process, it is often necessary to map business object data from its source values to a specific target.\nOn a UBC business object, there is a single point to define mapping for in-/and outbound specific to a business object. Methods like ",(0,t.jsx)(n.code,{children:"CREATE_MAPPER_INBOUND"})," or ",(0,t.jsx)(n.code,{children:"CREATE_MAPPER_OUTBOUND"})," can be implemented on subclasses of ",(0,t.jsx)(n.code,{children:"/UBC/CL_BO"})," and will be called when its time to map the data (see also ",(0,t.jsx)(n.a,{href:"#standard-workflows",children:"workflow"}),"). By returning an implementation for ",(0,t.jsx)(n.code,{children:"/UBC/IF_BO_MAPPING"})," which usually inherits from ",(0,t.jsx)(n.code,{children:"/UBC/CL_BO_MAPPING"})," you can implement custom mapping logic in defined abstract methods which is perfectly integrated in ",(0,t.jsx)(n.a,{href:"/products/UBC/IO/documentation",children:"UBC.io"})," and ",(0,t.jsx)(n.a,{href:"/products/UBC/FLOW/documentation",children:"UBC.flow"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The mapping will be applied for your process and used for the follow-up steps. The applied mapping and original data will be visible in ",(0,t.jsx)(n.a,{href:"/products/UBC/IO/documentation",children:"UBC.io"})," for good traceability.\nHint: any mapping in inbound processing or even before triggering outbound process is to be avoided. The reason is simple \u2013 the monitoring/traceability will be lost."]}),"\n",(0,t.jsx)(n.h2,{id:"proxy",children:"Proxy"}),"\n",(0,t.jsxs)(n.p,{children:['Another central object in within UBC is the concept about Proxies. A Proxy is a representation of a collection of outbound-services reachable at a specific domain. Including all the information about, which Authorization has to be used, RFC destination, other metadata about which person to notify on errors, ...\nA process in UBC always is connected to a Proxy, which of course can also be UBC itself but necessarily not need to.\nThe key of a Proxy is an organization-id (char36) which can be freely defined.\nEach "proxy" representation has a type which points to a Proxy implementation. See ',(0,t.jsx)(n.code,{children:"Proxy type configuration"}),' in Customizing. We offer some default implementation for a set of proxies (Azure Data Storage, Unibright.ONE, BTP Document Extraction, Office 365 Mail, S1SEVEN, ...), own proxy types can of course be added.\nUsually each use case has its own "setup" task list specifiying the other attributes for a proxy, so please refer to the dedicated use case. It will generate Organization Id, the type of authorization, credentials, RFC destination, ...\nA Proxy can be instantiated by calling methods of ',(0,t.jsx)(n.code,{children:"/UBC/CL_PROXY_FACTORY"}),", giving the organization Id.\nA proxy can be linked to a specific SAP company code in the client. This linkage can be used for authorization checks (see ",(0,t.jsx)(n.a,{href:"/products/UBC/",children:"UBC documentation"}),") and/or proper routing of documents to solely one of many proxies."]}),"\n",(0,t.jsx)(n.h2,{id:"standard-io-interfaces",children:"Standard I/O interfaces"}),"\n",(0,t.jsxs)(n.p,{children:["Delivering standard REST services with our ",(0,t.jsx)(n.a,{href:"/products/UBC/IO/documentation",children:"UBC.rest"})," component making use in standard object implementations ",(0,t.jsx)(n.code,{children:"/UBC/CL_BO"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"inbound--ubc_in",children:"Inbound \u2013 UBC_IN"}),"\n",(0,t.jsxs)(n.p,{children:["This is the interface regarding all inbound messages for any business object (as implemented in ",(0,t.jsx)(n.code,{children:"/UBC/CL_BO"}),"), for example triggered by ",(0,t.jsx)(n.a,{href:"/products/UBC/REST/documentation",children:"UBC.rest"}),", or any other process in SAP calling ",(0,t.jsx)(n.code,{children:"/UBC/CL_BO_FACTORY=>GET_INSTANCE( )->CREATE( )->LOG_INBOUND( )"}),"...\nThe interface itself triggers a new inbound workflow where the actual process is built, see ",(0,t.jsx)(n.a,{href:"#inbound",children:"Inbound workflow"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"outbound--ubc_out",children:"Outbound \u2013 UBC_OUT"}),"\n",(0,t.jsxs)(n.p,{children:["This is the interface regarding all outbound messages for any business object (as implemented in ",(0,t.jsx)(n.code,{children:"/UBC/CL_BO"}),"), for example triggered by ",(0,t.jsx)(n.a,{href:"/products/UBC/IDOC/documentation",children:"UBC.idoc"}),", or any other process in SAP calling ",(0,t.jsx)(n.code,{children:"/UBC/CL_BO_FACTORY=>GET_INSTANCE( )->CREATE( )->LOG_OUTBOUND( )"}),"...\nThe interface itself triggers a new outbound workflow where the actual process is built like transmitting data to other systems, see ",(0,t.jsx)(n.a,{href:"#outbound",children:"Outbound workflow"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"inbound-message-status--ubc_msg_st",children:"Inbound Message Status \u2013 UBC_MSG_ST"}),"\n",(0,t.jsxs)(n.p,{children:["This is the interface regarding the status update for previously sent business objects. The interface can be triggered by a rest service or by methods ",(0,t.jsx)(n.code,{children:"/UBC/IF_BO->LOG_INBOUND_RESULT_STATUS( )"}),". It shows whether the processing of a proxy was successful or not. If it was successful, an object connection ID then will be linked to the previously sent object (table ",(0,t.jsx)(n.code,{children:"/UBC/BOC"}),') and the outbound workflow will be completed.\nThis is only applicable, if your proxy supports "status" messages by implementing method ',(0,t.jsx)(n.code,{children:"/ubc/if_proxy_bo~is_sending_bo_status"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"Most of the time not needed!"})}),"\n",(0,t.jsx)(n.h3,{id:"outbound-message-status--ubc_status_out",children:"Outbound Message Status \u2013 UBC_STATUS_OUT"}),"\n",(0,t.jsxs)(n.p,{children:["This is the interface regarding the status update for previously received business objects. The interface is triggered by the inbound process when a posting of a business object was successful or not and activates the transmission of this information to the connected proxy.\nThis is only applicable, if your Proxy implementation specifies a resource in method ",(0,t.jsx)(n.code,{children:"get_resource_bo_status"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"Most of the time not needed!"})}),"\n",(0,t.jsx)(n.h2,{id:"standard-workflows",children:"Standard Workflows"}),"\n",(0,t.jsxs)(n.p,{children:["Delivering standard REST services with our ",(0,t.jsx)(n.a,{href:"/products/UBC/FLOW/documentation",children:"UBC.flow"})," component making use in standard object implementations ",(0,t.jsx)(n.code,{children:"/UBC/CL_BO"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["It is to emphasize that every step modelled within the standard delivery workflows does not require any user interaction/approval. If this should be required, please refer to the documentation of ",(0,t.jsx)(n.a,{href:"/products/UBC/FLOW/documentation",children:"UBC.flow"}),". You are free to change the standard workflows as well as defining new ones."]}),"\n",(0,t.jsx)(n.h3,{id:"inbound",children:"Inbound"}),"\n",(0,t.jsxs)(n.p,{children:["This is the workflow triggered by an inbound message, see ",(0,t.jsx)(n.a,{href:"#inbound--ubc_in",children:"Inbound - UBC_IN"}),", the workflow definition is ",(0,t.jsx)(n.code,{children:"80000"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Inbound workflow",src:s(14455).A+"",width:"1405",height:"274"})}),"\n",(0,t.jsx)(n.p,{children:"This is just a highl-level overview of its steps:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Mapping of inbound message, call of implementation ",(0,t.jsx)(n.code,{children:"/UBC/CL_BO->CREATE_MAPPER_INBOUND"}),". If implemented, the mapping will be applied to data and visualized in ",(0,t.jsx)(n.a,{href:"/products/UBC/IO/documentation",children:"UBC.io"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Posting of data, Implementation ",(0,t.jsx)(n.code,{children:"/UBC/CL_BO->PROCESS_INBOUND_BO"})," will be called. (to be redefined)"]}),"\n",(0,t.jsxs)(n.li,{children:["Error handling steps: workflow will be stuck at this point, until a restart is executed within ",(0,t.jsx)(n.a,{href:"/products/UBC/IO/documentation",children:"UBC.io"}),". You are free to add error notifications, see ",(0,t.jsx)(n.a,{href:"/products/UBC/FLOW/documentation",children:"UBC.flow"})," documentation."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"outbound",children:"Outbound"}),"\n",(0,t.jsxs)(n.p,{children:["This is the workflow triggered by outbound message, see ",(0,t.jsx)(n.a,{href:"#outbound--ubc_out",children:"Outbound \u2013 UBC_OUT"}),", the workflow definition is `80001."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Outbound workflow",src:s(90524).A+"",width:"1399",height:"348"})}),"\n",(0,t.jsx)(n.p,{children:"This is just a highl-level overview of its steps:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Mapping of outbound message, call of implementation ",(0,t.jsx)(n.code,{children:"/UBC/CL_BO->CREATE_MAPPER_OUTBOUND"}),". If implemented, mapping will be applied to data and visualized in ",(0,t.jsx)(n.a,{href:"/products/UBC/IO/documentation",children:"UBC.io"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Posting of data, standard implementation in ",(0,t.jsx)(n.code,{children:"/UBC/CL_BO"})," transmits the message to target proxy, method ",(0,t.jsx)(n.code,{children:"/UBC/IF_PROXY_BO->DISPATCH_BUSINESS_OBJECT( )"})]}),"\n",(0,t.jsxs)(n.li,{children:["Waiting for ",(0,t.jsx)(n.a,{href:"#inbound-message-status--ubc_msg_st",children:"status update"})," if configured. The step will automatically be approved or declined (depending on success or error coming back)."]}),"\n",(0,t.jsxs)(n.li,{children:["Error handling steps: workflow will be stuck at this point, until a restart is executed within ",(0,t.jsx)(n.a,{href:"/products/UBC/IO/documentation",children:"UBC.io"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"standard-rest-interfaces",children:"Standard REST interfaces"}),"\n",(0,t.jsxs)(n.p,{children:["Delivering standard REST services with our ",(0,t.jsx)(n.a,{href:"/products/UBC/REST/documentation",children:"UBC.rest"})," component making use of standard object implementations ",(0,t.jsx)(n.code,{children:"/UBC/CL_BO"}),"."]}),"\n",(0,t.jsxs)(n.h3,{id:"proxy-configuration-ubcproxies",children:["Proxy configuration ",(0,t.jsx)(n.code,{children:"/ubc/proxies"})]}),"\n",(0,t.jsxs)(n.p,{children:["Available methods: ",(0,t.jsx)(n.code,{children:"POST"}),", ",(0,t.jsx)(n.code,{children:"GET"}),"\nConfiguration for outbound \u201cproxy\u201d which can receive and send objects from a UBC point of view. Some technical information will be set, such as hostname, authorization, RFC destination etc. This is just a REST webservice for configuring a proxy, normally it is done by some system setup task (see the project details)\nFor ",(0,t.jsx)(n.code,{children:"GET"})," a list of proxies will be returned.\nFor ",(0,t.jsx)(n.code,{children:"POST"}),' a proxy configuration can be just changed/adapted. It is just some kind of "service" interface, normally not needed.']}),"\n",(0,t.jsxs)(n.h3,{id:"business-objects-model-ubcbusiness_object_modelstypetype_version",children:["Business Objects Model ",(0,t.jsx)(n.code,{children:"/ubc/business_object_models/{type}/{type_version}"})]}),"\n",(0,t.jsxs)(n.p,{children:['Every "UBC" Business Object is defined by customizing and its structure has to be modelled. This can, for example, be based on an IDOC basic type/extension or completely freestyle in a custom implementation.\nThis method ist for getting the Business Object Model schema definition by giving Object Type and Version\nAvailable methods: ',(0,t.jsx)(n.code,{children:"GET"}),"\nParameters:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["type (as it is modelled within UBC customizing ",(0,t.jsx)(n.strong,{children:"Business object configuration"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["type_version (as it is modelled within UBC customizing ",(0,t.jsx)(n.strong,{children:"Business object configuration"}),")\nRespose:\nOpen API Schema for the specified object as it was modelled within UBC"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"business-objects-ubcbusiness_objects",children:["Business objects ",(0,t.jsx)(n.code,{children:"/ubc/business_objects"})]}),"\n",(0,t.jsxs)(n.p,{children:['Posting of "UBC" business objects incl. monitoring, framework, mapping, etc.\nThis resource is rather generic and acts by logic configured for a specific object type (payload mapping, data handling such as IDOC, etc.) within UBC customizing.\n(see ',(0,t.jsx)(n.strong,{children:"Business object configuration"}),")\nIt can further handle all business objects configured within UBC. Therefore, payload depends highly on the business object itself because it has to match the business object structure. See also ",(0,t.jsx)(n.a,{href:"#business-objects-model-ubcbusiness_object_modelstypetype_version",children:"Business objects model REST service"}),"\nAvailable methods: ",(0,t.jsx)(n.code,{children:"POST"}),"\nParameters:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"type"})," type of modelled object"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"type_version"})," version of modelled object"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"organization_id"})," registered system/proxy to be able to do some sender-specific mapping/routing, see also ",(0,t.jsx)(n.a,{href:"#proxy-configuration-ubcproxies",children:"Proxy configuration"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"id"})," object id"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"object_connection_id"})," external ID to which object corresponds and to which circuit was triggered - optional"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"payload"})," payload as given by business object implementation\nReturns:\nStatus Code ",(0,t.jsx)(n.code,{children:"200"})," if everything was OK\nMessages table in response of SAP-type ",(0,t.jsx)(n.code,{children:"bapiret2"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"data-archiving",children:"Data Archiving"}),"\n",(0,t.jsxs)(n.p,{children:["UBC comes with a dedicated Archiving Object ",(0,t.jsx)(n.code,{children:"/UBC/BOC"}),", used to archive all the data which was persisted to monitor and control the workflow of objects. As in most SAP standard applications the archive runs are scheduled within transaction ",(0,t.jsx)(n.code,{children:"SARA"}),".\nThe write step offers multiple options to select the messages. Please note that only data will be archived which are produced by our Addon and are in a ",(0,t.jsx)(n.strong,{children:"completed"})," state.\nThe write step does not trigger data archiving of a connected business object or IDOC. The data archiving can also be included in customer archiving routines. All what is needed is to call methods of ",(0,t.jsx)(n.code,{children:"/UBC/IF_ARC_BOC_SERVICE"})," in custom write programs."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},90524:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/image_002-56997db1c55e69d85e90e78dd1ef4b1e.png"}}]);
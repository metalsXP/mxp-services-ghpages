"use strict";(self.webpackChunkubc_services=self.webpackChunkubc_services||[]).push([[5514],{28453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>r});var t=n(96540);const s={},a=t.createContext(s);function o(e){const i=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:i},e.children)}},67375:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"integrations/UnibrightONE/documentation","title":"Unibright.ONE","description":"Intro","source":"@site/docs/products/UBC/integrations/UnibrightONE/documentation.md","sourceDirName":"integrations/UnibrightONE","slug":"/integrations/UnibrightONE/documentation","permalink":"/products/UBC/integrations/UnibrightONE/documentation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ubc","previous":{"title":"S1SEVEN","permalink":"/products/UBC/integrations/S1SEVEN/documentation"},"next":{"title":"BTP Document Information Extraction","permalink":"/products/UBC/integrations/DIE/documentation"}}');var s=n(74848),a=n(28453);const o={},r="Unibright.ONE",c={},l=[{value:"Intro",id:"intro",level:2},{value:"Basic use case",id:"basic-use-case",level:2},{value:"Use case outlook mutliple participants exchanging SyncTrees",id:"use-case-outlook-mutliple-participants-exchanging-synctrees",level:2},{value:"Use case example customs clearance (including Zero Knowledge Proof (ZKP))",id:"use-case-example-customs-clearance-including-zero-knowledge-proof-zkp",level:2},{value:"Consistency",id:"consistency",level:3},{value:"Versioning",id:"versioning",level:3},{value:"Collusion",id:"collusion",level:3},{value:"UBC",id:"ubc",level:2}];function h(e){const i={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"unibrightone",children:"Unibright.ONE"})}),"\n",(0,s.jsx)(i.h2,{id:"intro",children:"Intro"}),"\n",(0,s.jsx)(i.p,{children:"Unibright ONE makes it possible to notarize the exchange of business objects (such as orders or invoices) between process participants. It is recorded on chain that all participants have reached an agreement that the correct content has been exchanged, i.e. sent, received and understood. Unibright ONE is built as a service-oriented platform enabling secure enterprise process synchronization on various blockchains, between multiple participants, optionally protected by zero- and limited knowledge technology. Key features of Unibright ONE are:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"A service API for all microservices, callable from all ERP systems (SAP, Microsoft, Oracle, SalesForce, \u2026) and legacy systems via REST services"}),"\n",(0,s.jsx)(i.li,{children:"Workgroups with many participants for collaboration supported"}),"\n",(0,s.jsx)(i.li,{children:"Baselining, notarization, workgroup management and notifications via service calls"}),"\n",(0,s.jsx)(i.li,{children:"Notifications of new notarizations via pull (via REST), PUSH (via MQTT or NATS), email or retrieval via platform dashboard"}),"\n",(0,s.jsx)(i.li,{children:"Usage of multiple blockchains (Baseledger, Ethereum, Polygon, Bitcoin) as notarization targets per call"}),"\n",(0,s.jsx)(i.li,{children:"Pay-per-use with fiat gateway and/or UBT payment \u2014 no proprietary cryptocurrency holdings are required"}),"\n",(0,s.jsx)(i.li,{children:"Optional securing of processes and involvement of third parties (such as auditors) through zero- and limited-knowledge technology (\u201cSyncTree\u201d)"}),"\n",(0,s.jsx)(i.li,{children:"Finalizing and exiting of any number of single notarizations of one or more processes in arbitrary blockchains, where it is also explicitly possible to combine notarizations from different blockchains (e.g. Baseledger and Bitcoin) for an exit in another blockchain (e.g. Ethereum)"}),"\n",(0,s.jsx)(i.li,{children:"Dashboard for configuration and administration"}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"basic-use-case",children:"Basic use case"}),"\n",(0,s.jsx)(i.p,{children:'The simplest use case of Unibright ONE is to notarize "something" - most often a hash of "something" - into a blockchain of choice. Thereby making us of a blockchain as a decentralized, bullet-proof way of storing information to be able to make use of that notarization at a later point in time. For example, one could store the hash (AKA checksum) of a document in a blockchain to later be able to proof that he did know the document - otherwise he could not have created and stored its hash. Using a public/private key pair here - one can come up with a basic document signing use case for exmaple. Certificates of any kind could be another applucation - there respective hask/checksum can be stored on chain using a key pair for signing. This allows for tamper proof test certification management as required in multiple industrial use cases.'}),"\n",(0,s.jsx)(i.h2,{id:"use-case-outlook-mutliple-participants-exchanging-synctrees",children:"Use case outlook mutliple participants exchanging SyncTrees"}),"\n",(0,s.jsxs)(i.p,{children:["Unibright ONE will make it possible to notarize the exchange of business objects (such as orders or invoices) between process participants. It is recorded on chain that all participants have reached an agreement that the correct content has been exchanged, i.e. sent, received and understood. For this purpose, objects will be converted into a \u201cSyncTree\u201d, a Merkle tree which, in addition to the attributes of the object as leaves, also calculates hashes at various levels and displays them to check the correctness of the data. Only the top node of the tree, the \u201croot proof,\u201d is stored in the blockchain. Consensus can then be established via these notarizations, meaning that each participant in a business process verifies (i.e., accepts or disagrees with) the exchanged SyncTrees.\n",(0,s.jsx)(i.img,{src:"https://miro.medium.com/v2/resize:fit:4800/format:webp/1*FThonD16qGF0CVYHAaU7bA.png",alt:"SyncTree",title:"SyncTree"})]}),"\n",(0,s.jsxs)(i.p,{children:["A set of individual notarizations including the associated approvals or rejections within a workgroup can be transferred back into a SyncTree of a special kind (the \u201cTrustMesh\u201d) and notarized after the end of the process itself. Among other things, this enables individual steps of a process (e.g., order, delivery notification, receipt confirmation, and invoice) to be stored cheaply and quickly in a highly available blockchain such as Baseledger, but the consensus on the overall process to be recorded afterwards in a blockchain such as Ethereum that is as widely used as possible.\n",(0,s.jsx)(i.img,{src:"https://miro.medium.com/v2/resize:fit:4800/format:webp/1*IbJ2j750Q_LIkDEUkQAKwg.png",alt:"TrustMesh",title:"TrustMesh"})]}),"\n",(0,s.jsx)(i.p,{children:"The stored data in the blockchain is meaningful only to the participants in the process, and does not in itself reveal anything about the nature or content of the process or even about the participating parties. It is the immutable and temporally unambiguous recorded evidence that the root of a particular SyncTree was recorded in a blockchain at a particular time."}),"\n",(0,s.jsx)(i.p,{children:"Uninvolved third parties, such as auditors, can be provided with portions of the SyncTree under Limited or Zero-Knowledge, so that all intermediate evidence can be recalculated and verified without revealing the actual content of the original business object."}),"\n",(0,s.jsx)(i.p,{children:"The concept of the SyncTree was introduced by Unibright as early as 2021 with the unveiling of the Baseledger Test Network, and is now being applied in a similar form in other cases, e.g., in the \u201cProof-Of-Reserve\u201d as discussed and proposed right now by prominent figures such as Vitalik Buterin and crypto exchanges such as Binance. With Unibright ONE, it is straightforward to implement a \u201cProof-Of-Reserve\u201d use case."}),"\n",(0,s.jsx)(i.h2,{id:"use-case-example-customs-clearance-including-zero-knowledge-proof-zkp",children:"Use case example customs clearance (including Zero Knowledge Proof (ZKP))"}),"\n",(0,s.jsxs)(i.p,{children:["A real-world example described for exmaple in ",(0,s.jsx)(i.a,{href:"https://github.com/eea-oasis/baseline-blips/issues/1",children:"https://github.com/eea-oasis/baseline-blips/issues/1"})," is customs clearance in Europe. The process includes several documents issued by different parties which all must be consistent.\n",(0,s.jsx)(i.img,{src:"https://user-images.githubusercontent.com/1388686/133945760-2e0fff96-3013-42cd-b02a-467218ea2731.png",alt:"Customs documents",title:"Customs documents"}),"\nOther documents follow very similar process of verification. One exception is \u201cBill of Lading\u201d that \u201cconveys title to the goods, meaning that the bearer of the Bill of Lading is the owner of the goods.\u201d Therefore, its digital form MUST be treated as an asset tracked (through the Zero Knowledge Proof (ZKP) of its ownership when privacy is required) on a blockchain."]}),"\n",(0,s.jsx)(i.h3,{id:"consistency",children:"Consistency"}),"\n",(0,s.jsx)(i.p,{children:"Other documents when digitized, MUST be issued, and signed by defined issuer and can be linked as nested verifiable credentials (VCs) by including the hash or the full parent document in the child document. Combining nested VC and digital signature ensures the consistency of each digital document. Consistency here means that any change in any document will invalidate the digital signature verification and thus detectable."}),"\n",(0,s.jsx)(i.h3,{id:"versioning",children:"Versioning"}),"\n",(0,s.jsx)(i.p,{children:"When a new version of a document has been issued, it MUST be signed by all the involved parties. e.g., if a change must be approved by Exporter, Importer and Customs authorities of the exporting country, all three signatures are required on the new version."}),"\n",(0,s.jsx)(i.h3,{id:"collusion",children:"Collusion"}),"\n",(0,s.jsx)(i.p,{children:"When all signatures of the stakeholders are requires, and all the documents are tightly linked using nested VCs, there is no room for collusion."}),"\n",(0,s.jsx)(i.h2,{id:"ubc",children:"UBC"}),"\n",(0,s.jsxs)(i.p,{children:["UBC has a built-in functionality to allow for service-oriented interaction with Unibright ONE. Thereby use-cases of all kind can be implmented via UBC interacting with an account within Unibright ONE. Every account in Unibright ONE comes with an API-Key (Bearer-Token) that can be used by UBC to call all exposed services within Unibright ONE (see swagger page for details: ",(0,s.jsx)(i.a,{href:"https://unibright.one/swagger/index.html",children:"https://unibright.one/swagger/index.html"}),"). The respectice account within Unibright ONE can be configured via the web-based frontend. This configuration includes among other things, the blockchain tareget in which notarizations take place (Ethereum , Polygon, Baseledger, Bitcoin,...) and the handling of credits used to pay for notrarizations.\n",(0,s.jsx)(i.img,{src:"https://miro.medium.com/v2/resize:fit:4800/format:webp/1*_qv0FRxVaOaAnjvxDTenWA.png",alt:"Unibright ONE Cockpit",title:"Unibright ONE Cockpit"})]})]})}function d(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);
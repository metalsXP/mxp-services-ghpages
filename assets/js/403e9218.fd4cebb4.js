"use strict";(self.webpackChunkubc_services=self.webpackChunkubc_services||[]).push([[3869],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(96540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}},32856:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"REST/documentation","title":"RESTful webservices (UBC.rest)","description":"Intro","source":"@site/docs/products/UBC/REST/documentation.md","sourceDirName":"REST","slug":"/REST/documentation","permalink":"/products/UBC/REST/documentation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ubc","previous":{"title":"Legacy functions","permalink":"/products/UBC/IO/legacy_functions"},"next":{"title":"Mapping framework (UBC.map)","permalink":"/products/UBC/MAP/documentation"}}');var i=t(74848),o=t(28453);const r={},a="RESTful webservices (UBC.rest)",d={},c=[{value:"Intro",id:"intro",level:2},{value:"Open API specification / Swagger UI",id:"open-api-specification--swagger-ui",level:2},{value:"Custom Interfaces",id:"custom-interfaces",level:2},{value:"Development",id:"development",level:3},{value:"Handling files",id:"handling-files",level:4},{value:"Handling anonymous objects",id:"handling-anonymous-objects",level:4},{value:"Customizing",id:"customizing",level:3},{value:"Linkage to UBC.io",id:"linkage-to-ubcio",level:3},{value:"Standard Interfaces",id:"standard-interfaces",level:2},{value:"Authentication <code>/ubc/auth</code>",id:"authentication-ubcauth",level:3},{value:"Configuration/Security",id:"configurationsecurity",level:2}];function l(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"restful-webservices-ubcrest",children:"RESTful webservices (UBC.rest)"})}),"\n",(0,i.jsx)(n.h2,{id:"intro",children:"Intro"}),"\n",(0,i.jsx)(n.p,{children:"UBC - Unified Backend Connector comes with a powerful component for designing, documenting and testing of RESTful webservices.\nAll integrated into your well-known ABAP-environment, there is no need for knowing any specific REST-details!\nIn contrast to OData you are completely free in the interface design - do not let the technology limiting you!"}),"\n",(0,i.jsx)(n.h2,{id:"open-api-specification--swagger-ui",children:"Open API specification / Swagger UI"}),"\n",(0,i.jsxs)(n.p,{children:["In UBC, every interface is well described by OpenAPI and can be displayed and tested using Swagger UI.\nSee also ",(0,i.jsx)(n.a,{href:"https://swagger.io/specification/v3/",children:"official Open API specification"}),".\nCurrently the standard message format for every interface is ",(0,i.jsx)(n.code,{children:"JSON"}),", as it is the one with the lowest payload size and a high market acceptance (state-of-the-art)."]}),"\n",(0,i.jsxs)(n.p,{children:["In UBC, ",(0,i.jsx)(n.a,{href:"https://swagger.io/tools/swagger-ui/",children:"Swagger UI"})," is used for testing and displaying all the implemented interfaces."]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["Internet Explorer is ",(0,i.jsx)(n.strong,{children:"not"})," supported by Swagger UI. Make sure to open the link to Swagger UI in a modern browser."]})}),"\n",(0,i.jsx)(n.p,{children:"Swagger UI is available in your system by:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["calling transaction ",(0,i.jsx)(n.code,{children:"/UBC/SWAGGER"})]}),"\n",(0,i.jsxs)(n.li,{children:["directly open the URL ",(0,i.jsx)(n.code,{children:"<<sap_base_url>>/sap/bc/bsp/ubc/swagger/default.htm"})," in your browser\nMake sure to replace ",(0,i.jsx)(n.code,{children:"<<sap_base_url>>"})," with url/hostname pointing to your SAP system."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.img,{alt:"SAP Swagger UI",src:t(95838).A+"",width:"1662",height:"851"}),'\nJust choose your desired Interface you previously developed or want to check and click on "Try it out". Fill in the request body/attributes and "Execute".\nYou can have a look at the request in your browser\'s network tab or in Swagger directly.\nYour Interface implementation will then just be triggered ',(0,i.jsx)(n.strong,{children:"synchronously"}),". If there is the need for any asynchronous interfaces, consider using ",(0,i.jsx)(n.a,{href:"/products/UBC/IO/documentation",children:"UBC.io"})," component."]}),"\n",(0,i.jsxs)(n.p,{children:["Basically UBC comes with a few pre-delivered interfaces, which are described below.\nThe pre-delivered interfaces are all prefixed with ",(0,i.jsx)(n.code,{children:"/ubc/"})," and organized in a ",(0,i.jsx)(n.code,{children:"/ubc/"})," operations group.\nAll your custom developed interfaces are grouped in a second operations group called ",(0,i.jsx)(n.code,{children:"custom"}),". It is therefore recommended to prefix your interfaces logically. You are completely free to use any kind of prefix, except ",(0,i.jsx)(n.code,{children:"/ubc/"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"custom-interfaces",children:"Custom Interfaces"}),"\n",(0,i.jsx)(n.p,{children:"All details regarding API specification, conversion, etc. are handled within the REST framework itself, simply focus on what matters for the use case: the interface design and its business logic."}),"\n",(0,i.jsx)(n.h3,{id:"development",children:"Development"}),"\n",(0,i.jsx)(n.p,{children:"Create a new class representing your REST interfaces holding together all the possible operations for a single resource:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Modifying Requests\nBasically there are 2 possible operations for modifying a resource:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"POST"})," is for simply changing or creating a resource where the key is not (yet) known or just indirectly wrapped within the payload, for example: ",(0,i.jsx)(n.code,{children:"POST /questions"}),"\n",(0,i.jsx)(n.code,{children:"POST"})," is NOT idempotent. So if we retry the request ",(0,i.jsx)(n.strong,{children:"N"})," times, we will end up having ",(0,i.jsx)(n.strong,{children:"N"})," resources."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"PUT"})," is for creating/updating a resource where the full resource key is known by the caller. For example: ",(0,i.jsx)(n.code,{children:"PUT /questions/{id}"}),"\n",(0,i.jsx)(n.code,{children:"PUT"})," method is idempotent. So if we retry a request multiple times, that should be equivalent to a single request invocation."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Summary:"})," Technically you can always use ",(0,i.jsx)(n.code,{children:"POST"})," for simplicity reasons, if you ensure at sender side that requests are just sent once. In a M2M environment this is usually ensured, so we just recommend using ",(0,i.jsx)(n.code,{children:"POST"}),". Nevertheless, if you want to have your interfaces RESTful, consider using ",(0,i.jsx)(n.code,{children:"PUT"})," and ",(0,i.jsx)(n.code,{children:"POST"})," correctly."]})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"GET"}),"\nGetting a Resource at a given path, for example ",(0,i.jsx)(n.code,{children:"GET /questions"})," or ",(0,i.jsx)(n.code,{children:"GET /questions/{id}"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"DELETE"}),"\nDeleting a Resource at a given path, for example ",(0,i.jsx)(n.code,{children:"DELETE /questions/{id}"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Letting your new class inherit from ",(0,i.jsx)(n.code,{children:"/UBC/CL_REST_RESOURCE"})," gives the possibility to redefine the abstract methods:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"get_method_post"})," - returning an object inheriting from class ",(0,i.jsx)(n.code,{children:"/UBC/CL_REST_METHOD_POST"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"get_method_put"})," - returning an object inheriting from class ",(0,i.jsx)(n.code,{children:"/UBC/CL_REST_METHOD_PUT"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"get_method_get"})," - returning an object inheriting from class ",(0,i.jsx)(n.code,{children:"/UBC/CL_REST_METHOD_GET"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"get_method_delete"})," - returning an object inheriting from class ",(0,i.jsx)(n.code,{children:"/UBC/CL_REST_METHOD_DELETE"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Implementing such a method and returning an object means that the operation is basically supported!"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"Only implement the methods for the operations you would like to support"})}),"\n",(0,i.jsx)(n.p,{children:"You can implement the classes as local classes within your resource global class (or define new global ones, its up to you).\nJust a few words about the abstract methods of the dedicated class for the operations:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"get_type_request_attributes"}),"\nIf your resource accepts ",(0,i.jsx)(n.strong,{children:"Request attributes"}),", return a reference to an ABAP structure containing the possible fields.\nIn method ",(0,i.jsx)(n.code,{children:"execute"})," you can then just cast the dedicated importing parameter (type any) to this concrete type, representing the request attributes.\nFor example, if your Resource is located at ",(0,i.jsx)(n.code,{children:"/questions/{id}"})," you need to return an ABAP structure, containing the field ",(0,i.jsx)(n.code,{children:"id"}),".\nThis is just optional and will be interpreted by Open API/Swagger, wether and what returned from this method."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"get_type_request_body"}),"\nIf your resource accepts a ",(0,i.jsx)(n.strong,{children:"Request body"}),", e.g. containing the payload of a message, return a reference to an ABAP type describing the content.\nIn method ",(0,i.jsx)(n.code,{children:"execute"})," you can then just cast the dedicated importing parameter (type any) to this concrete type, representing the request body.\nThis is just optional and will be interpreted by Open API/Swagger, wether and what returned from this method."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"get_type_response_body"}),"\nIf your resource should return a ",(0,i.jsx)(n.strong,{children:"Response body"}),", e.g. containing results of posting an object, return a reference to an ABAP type describing the content (e.g. ",(0,i.jsx)(n.code,{children:"BAPIRET2_T"}),").\nIn method ",(0,i.jsx)(n.code,{children:"execute"})," you can then just cast the dedicated exporting parameter (type any) to this concrete type, representing the response body.\nThis is just optional and will be interpreted by Open API/Swagger.\nIf given, the response status code for success will be ",(0,i.jsx)(n.code,{children:"200"})," and returning the type specified. If not given, the response status code for success will be ",(0,i.jsx)(n.code,{children:"204"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"execute"}),"\nThis method is responsible for handling a single request, meaning the actual interface handling.\nInput: Request Attributes, Request Body as type ",(0,i.jsx)(n.code,{children:"any"}),". Just cast to the concrete type specified in its dedicated methods.\nOutput: Response Body, if specified in ",(0,i.jsx)(n.code,{children:"get_type_response_body"}),". Just cast to the concrete type and return the data.\nFrom an integration perspective:\nIf the execution has to fail (due to an error, e.g. the requested object is locked) do not return just some messages in response body, rather raise an exception of type ",(0,i.jsx)(n.code,{children:"/UBC/CX_REST"}),". This makes the request fail and not showing success on the sender side requiring parsing of messages. You can do that in addition to the exception, but rather no error control by responses.\nAlways ensure having your own transaction handling (",(0,i.jsx)(n.code,{children:"COMMIT WORK"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"configure_documentation"}),"\nThis method will be called when rendering Open API specification, in order to get the appropriate documentation for:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"the operation itslef (description and title)"}),"\n",(0,i.jsx)(n.li,{children:"single fields in attributes/body. If nothing given, the descriptions will be derived from the DDIC (Data element, Structures, ...)"}),"\n",(0,i.jsxs)(n.li,{children:["Response status description - if the default for ",(0,i.jsx)(n.code,{children:"200"})," and ",(0,i.jsx)(n.code,{children:"204"})," is not enough"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Best practice is to document the operation (title and description) to have an high level overview which interface is doing what. Writing just few sentences about the interface makes your life easier afterwards.",(0,i.jsx)(n.br,{}),"\n","You are free to use harcoded text/text symbols or translatable docu objects (",(0,i.jsx)(n.code,{children:"SE61"})," with class ",(0,i.jsx)(n.code,{children:"TX"}),")."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["As a reference and quick-start you can copy from the template class ",(0,i.jsx)(n.code,{children:"/UBC/CL_REST_RESOURCE_TEMPLATE"})," and just remove the unncesseary things.\nFor a better overview, please find a hardcopy below."]})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Global Class ",(0,i.jsx)(n.code,{children:"/UBC/CL_REST_RESOURCE_TEMPLATE"}),":"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-abap",children:'"! <p class="shorttext synchronized" lang="en">Example REST Resource supporting all operations</p>\n"! This class just implements all possible operations\n"! <br>You are free to copy the template class as a quick-start and just remove unnecessary things\nclass /ubc/cl_rest_resource_template definition\n  public\n  inheriting from /ubc/cl_rest_resource\n  create public.\n\n  public section.\n  protected section.\n    methods get_method_delete redefinition.\n    methods get_method_get redefinition.\n    methods get_method_post redefinition.\n    methods get_method_put redefinition.\n  private section.\nendclass.\n\nclass /ubc/cl_rest_resource_template implementation.\n\n  method get_method_delete.\n    "enabling DELETE operation for resource\n    ro_result = new lcl_method_delete( me ).\n  endmethod.\n\n  method get_method_get.\n    "enabling GET operation for resource\n    ro_result = new lcl_method_get( me ).\n  endmethod.\n\n  method get_method_post.\n    "enabling DELETE operation for resource\n    ro_result = new lcl_method_post( me ).\n  endmethod.\n\n  method get_method_put.\n    "enabling PUT operation for resource\n    ro_result = new lcl_method_put( me ).\n  endmethod.\nendclass.\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Local Types Section of ",(0,i.jsx)(n.code,{children:"/UBC/CL_REST_RESOURCE_TEMPLATE"}),":"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-abap",children:"\"! GET Operation example\nclass lcl_method_get definition create public inheriting from /ubc/cl_rest_method_get.\n  protected section.\n    types:\n      begin of s_request_attributes,\n        id type matnr,\n      end of s_request_attributes.\n    types:\n      begin of s_response_body,\n        id          type matnr,\n        description type maktx,\n      end of s_response_body.\n    methods configure_documentation redefinition.\n    methods get_type_request_attributes redefinition.\n    methods get_type_response_body redefinition.\n    methods execute redefinition.\nendclass.\n\nclass lcl_method_get implementation.\n  method configure_documentation.\n    io_documentation->configure_method(\n      exporting\n        iv_summary                 = 'Getting Resource data (Title)'\n        iv_description_docu_object = 'ZUBC_REST_RES_GET_TEMPL' \"create in SE61 -> class TX, name ZUBC_REST_RES_GET_TEMPL\n    ).\n  endmethod.\n\n  method get_type_request_attributes.\n    rr_data = new s_request_attributes( ).\n  endmethod.\n\n  method get_type_response_body.\n    rr_data = new s_response_body( ).\n  endmethod.\n\n  method execute.\n    \"cast type any to concrete types, specified by above methods\n    data(lr_request_attributes) = ref s_request_attributes( iv_request_parameters ).\n    data(lr_response_body) = ref s_response_body( ev_response_body ).\n\n    \"typed access to input\n    if lr_request_attributes->id = '123'.\n      \"let the request fail\n      raise exception type /ubc/cx_rest\n      message id 'V1' number '899' with 'Failed to access data' ##NO_TEXT.\n    endif.\n\n    \"access the response body also directly\n    lr_response_body->description = 'test' ##NO_TEXT.\n  endmethod.\nendclass.\n\n\"! POST Operation example\nclass lcl_method_post definition create public inheriting from /ubc/cl_rest_method_post.\n  protected section.\n    types:\n      begin of s_request_object,\n        id          type matnr,\n        description type maktx,\n      end of s_request_object.\n    methods configure_documentation redefinition.\n    methods get_type_request_attributes redefinition.\n    methods get_type_request_body redefinition.\n    methods get_type_response_body redefinition.\n    methods execute redefinition.\nendclass.\n\nclass lcl_method_post implementation.\n  method configure_documentation.\n    io_documentation->configure_method(\n      exporting\n        iv_summary                 = 'Posting Resource data (Title)'\n        iv_description_docu_object = 'ZUBC_REST_RES_POST_TEMPL' \"create in SE61 -> class TX, name ZUBC_REST_RES_POST_TEMPL\n    ).\n  endmethod.\n\n  method get_type_request_attributes.\n    return. \"no request attributes in this case, but technically possible\n  endmethod.\n\n  method get_type_request_body.\n    rr_data = new s_request_object( ).\n  endmethod.\n\n  method get_type_response_body.\n    rr_data = new s_request_object( ).\n  endmethod.\n\n  method execute.\n    \"cast type any to concrete types, specified by above methods\n    data(lr_request_attributes) = ref s_request_object( iv_request_body ).\n    data(lr_response_body) = ref s_request_object( ev_response_body ).\n\n    \"typed access to input\n    if lr_request_attributes->id = '123'.\n      \"let the request fail\n      raise exception type /ubc/cx_rest\n      message id 'V1' number '899' with 'Failed to access data' ##NO_TEXT.\n    endif.\n\n    \"access the response body also directly\n    lr_response_body->description = 'test' ##NO_TEXT.\n\n    \"always ensure having your own transaction handling\n    commit work.\n  endmethod.\nendclass.\n\n\"! PUT Operation example\nclass lcl_method_put definition create public inheriting from /ubc/cl_rest_method_put.\n  protected section.\n    types:\n      begin of s_request_attributes,\n        id type matnr,\n      end of s_request_attributes,\n      begin of s_request_body,\n        description type maktx,\n      end of s_request_body,\n      begin of s_response_body,\n        id          type matnr,\n        description type maktx,\n      end of s_response_body.\n    methods get_type_request_attributes redefinition.\n    methods get_type_request_body redefinition.\n    methods get_type_response_body redefinition.\n    methods execute redefinition.\n    methods configure_documentation redefinition.\nendclass.\n\nclass lcl_method_put implementation.\n  method configure_documentation.\n    io_documentation->configure_method(\n      exporting\n        iv_summary                 = 'Putting Resource data (Title)'\n        iv_description_docu_object = 'ZUBC_REST_RES_PUT_TEMPL' \"create in SE61 -> class TX, name ZUBC_REST_RES_PUT_TEMPL\n    ).\n  endmethod.\n\n  method get_type_request_attributes.\n    rr_data = new s_request_attributes( ).\n  endmethod.\n\n  method get_type_request_body.\n    rr_data = new s_request_body( ).\n  endmethod.\n\n  method get_type_response_body.\n    rr_data = new s_response_body( ).\n  endmethod.\n\n  method execute.\n    \"cast type any to concrete types, specified by above methods\n    data(lr_request_attributes) = ref s_request_attributes( iv_request_attributes ).\n    data(lr_request_body) = ref s_request_body( iv_request_body ).\n    data(lr_response_body) = ref s_response_body( ev_response_body ).\n\n    \"typed access to input\n    if lr_request_attributes->id = '123'.\n      \"let the request fail\n      raise exception type /ubc/cx_rest\n      message id 'V1' number '899' with 'Failed to access data' ##NO_TEXT.\n    endif.\n\n    \"access the response body also directly\n    lr_response_body->id = lr_request_attributes->id.\n    lr_response_body->description = lr_request_body->description.\n\n    \"always ensure having your own transaction handling\n    commit work.\n  endmethod.\nendclass.\n\n\"! DELETE Operation example\nclass lcl_method_delete definition create public inheriting from /ubc/cl_rest_method_delete.\n  protected section.\n    types:\n      begin of s_request_attributes,\n        id type matnr,\n      end of s_request_attributes.\n    methods configure_documentation redefinition.\n    methods get_type_request_attributes redefinition.\n    methods get_type_response_body redefinition.\n    methods execute redefinition.\nendclass.\n\nclass lcl_method_delete implementation.\n  method configure_documentation.\n    io_documentation->configure_method(\n      exporting\n        iv_summary                 = 'Deleting a Resource (Title)'\n        iv_description_docu_object = 'ZUBC_REST_RES_DEL_TEMPL' \"create in SE61 -> class TX, name ZUBC_REST_RES_DEL_TEMPL\n    ).\n  endmethod.\n\n  method get_type_request_attributes.\n    rr_data = new s_request_attributes( ).\n  endmethod.\n\n  method get_type_response_body.\n    \"return bapiret messages in body\n    rr_data = new bapiret2_t( ).\n  endmethod.\n\n  method execute.\n    \"cast type any to concrete types, specified by above methods\n    data(lr_request_attributes) = ref s_request_attributes( iv_request_attributes ).\n    data(lr_response_body) = ref bapiret2_t( ev_response_body ).\n\n    \"typed access to input\n    if lr_request_attributes->id = '123'.\n      \"let the request fail\n      raise exception type /ubc/cx_rest\n      message id 'V1' number '899' with 'Failed to access data' ##NO_TEXT.\n    endif.\n\n    \"access the response body also directly\n    insert value #( id = 'V1' number = '899' type = 'S' message_v1 = 'Deleted.' )\n    into table lr_response_body->* ##NO_TEXT.\n\n    \"always ensure having your own transaction handling\n    commit work.\n  endmethod.\nendclass.\n"})}),"\n",(0,i.jsx)(n.h4,{id:"handling-files",children:"Handling files"}),"\n",(0,i.jsxs)(n.p,{children:["Handling of files is done by just sending the base64 encoded byte data in the payload of your request.\nIn ABAP you only need to specify a field within your payload with type ",(0,i.jsx)(n.code,{children:"xstring"}),". We then expect the sender to send base64 encoded data in this field.\nExample:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-abap",children:"types begin of s_request_body.\ntypes file type xstring.\ntypes begin of s_request_body.\n"})}),"\n",(0,i.jsx)(n.p,{children:"have to be sent like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "file": "base64 encoded byte data"\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Please consider using gzip to further compress the file data and save bandwith.\nFrom an ABAP perspective: Just change your type of the field in request body to type ",(0,i.jsx)(n.code,{children:"/ubc/xstring_base64_gzip"}),".\nFrom a sender perspective: First compress your file data using gzip and then encode to base64."]}),"\n",(0,i.jsx)(n.h4,{id:"handling-anonymous-objects",children:"Handling anonymous objects"}),"\n",(0,i.jsxs)(n.p,{children:['Anonymous objects/attributes, where its definition is not known in ABAP yet (can be compared to "type any") have to use the data element ',(0,i.jsx)(n.code,{children:"/UBC/JSON"}),'.\nThe sender then can just send "any object" and it won\'t be converted to an ABAP type. The object will be represented basically as a string in your resource implementation. Its your responsibility to parse the anonymous object, e.g. depending on some metadata.\nExample:']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-abap",children:"types begin of s_request_body.\ntypes type type string.\ntypes anonymous_object type /ubc/json.\ntypes begin of s_request_body.\n"})}),"\n",(0,i.jsx)(n.p,{children:"have to be sent like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "type": "anonymous_1",\n  "anonymous_object": {\n    "field_1": "value_1",\n    "field_2": "value_2"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"customizing",children:"Customizing"}),"\n",(0,i.jsxs)(n.p,{children:["You can find the customizing all the REST-Interfaces in:\n",(0,i.jsx)(n.strong,{children:"SAP Reference IMG -> Cross Application Components -> Unified Backend Connector (UBC) -> REST Configuration"})," or by just calling transaction ",(0,i.jsx)(n.code,{children:"/UBC/CUSTOMIZING"})," and going to ",(0,i.jsx)(n.strong,{children:"REST configuration"}),".\nSimply choose a path for your new REST resource and link to your previously created implementation. Always start with a ",(0,i.jsx)(n.code,{children:"/"}),". Consider grouping your resources logically!\nFor example ",(0,i.jsx)(n.code,{children:"/templates/example1"})," can point to a new ABAP class ",(0,i.jsx)(n.code,{children:"/ubc/cl_rest_resource_template"}),'.\nFor every path variation, define an own entry. You can link more entries to the same implementation.\nSo if your example has also a GET operation with "request attributes", also register a path for ',(0,i.jsx)(n.code,{children:"/templates/example1/{id}"})," pointing to ",(0,i.jsx)(n.code,{children:"/ubc/cl_rest_resource_template"}),".\nThe path has to be valid according to the JAX-RS specification. Basically divide by ",(0,i.jsx)(n.code,{children:"/"}),' and wrapping "request attributes" by ',(0,i.jsx)(n.code,{children:"{}"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Summary: Defining a new resource in customizing at ",(0,i.jsx)(n.code,{children:"/templates/example1/{id}"})," makes it accessible at ",(0,i.jsx)(n.code,{children:"<<sap_base_url>>/ubc/templates/example1/{id}"}),". Please consider the implicit ",(0,i.jsx)(n.code,{children:"/ubc"})," prefix and that your request attributes in path are matching with your type in ",(0,i.jsx)(n.code,{children:"get_type_request_attributes"})," implementation."]})}),"\n",(0,i.jsx)(n.h3,{id:"linkage-to-ubcio",children:"Linkage to UBC.io"}),"\n",(0,i.jsxs)(n.p,{children:["A REST service can be created for a ",(0,i.jsx)(n.a,{href:"/products/UBC/IO/documentation",children:"UBC.io interface"}),". The current restriction is that the interface must have ",(0,i.jsx)(n.a,{href:"/products/UBC/IO/documentation#assign-technical-interfaces-to-ubcio-interface",children:"exactly one function assigned"}),", which is applicable in most cases.",(0,i.jsx)(n.br,{}),"\n","A pre-delivered REST Resource handler is available to translate and expose the ",(0,i.jsx)(n.a,{href:"/products/UBC/IO/documentation",children:"UBC.io interface"})," as a POST web service:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"CONSTRUCTOR"})," parameters of the operation are exposed as the request body."]}),"\n",(0,i.jsx)(n.li,{children:"If the message is synchronous, the message payload is returned as the response body. If the message is asynchronous, the REST service does not return a response (status 204)."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["To create the REST service, go to ",(0,i.jsx)(n.a,{href:"#customizing",children:"Customizing"})," and then:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create a new entry with an appropriate path"}),"\n",(0,i.jsxs)(n.li,{children:["For the REST Resource implementation, specify the pre-delivered class ",(0,i.jsx)(n.code,{children:"/UBC/CL_REST_RESOURCE_IO_IF"})]}),"\n",(0,i.jsxs)(n.li,{children:['In the "Parameters" field, specify the ',(0,i.jsx)(n.a,{href:"/products/UBC/IO/documentation",children:"UBC.io interface"})," the resource will be linked to"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.img,{alt:"REST Resource I/O linkage",src:t(45676).A+"",width:"1133",height:"290"}),(0,i.jsx)(n.br,{}),"\n","This can be used like any other REST resource and is visible in Swagger UI."]}),"\n",(0,i.jsx)(n.h2,{id:"standard-interfaces",children:"Standard Interfaces"}),"\n",(0,i.jsxs)(n.p,{children:["UBC comes with a pre-delivered set of standard operations. Those are not mentioned in detail, see the dedicated documentation like ",(0,i.jsx)(n.a,{href:"/products/UBC/BO/documentation",children:"BO"})," instead.\nDetailed documentation, fields, field lengths and general schemas etc. can be directly accessed in Swagger UI."]}),"\n",(0,i.jsxs)(n.h3,{id:"authentication-ubcauth",children:["Authentication ",(0,i.jsx)(n.code,{children:"/ubc/auth"})]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["This section only applies if Parameter ",(0,i.jsx)(n.code,{children:"/UBC/CSRF_CHECK"})," was set for SICF node. (see ",(0,i.jsx)(n.a,{href:"#configurationsecurity",children:"Configuration/Security"})," for details)"]})}),"\n",(0,i.jsxs)(n.p,{children:["Before any changing operation (POST, PUT, DELETE) a X-CSRF token has to be requested. This token can technically be retreived from each GET request, but for simplicity reasons there is a specific authentication resource ",(0,i.jsx)(n.code,{children:"/ubc/auth"})," which does exactly nothing but returning this token if requested.\nBe sure to apply cookies and X-CSRF token from response to each subsequent change operation received from this response."]}),"\n",(0,i.jsxs)(n.p,{children:["Available methods: ",(0,i.jsx)(n.code,{children:"GET"}),"\nRequest-Headers: ",(0,i.jsx)(n.code,{children:"X-CSRF-Token=Fetch"}),"\nResponse:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"x-csrf-token"})," in response headers"]}),"\n",(0,i.jsxs)(n.li,{children:["get all cookies specified in header ",(0,i.jsx)(n.code,{children:"set-cookie"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"configurationsecurity",children:"Configuration/Security"}),"\n",(0,i.jsxs)(n.p,{children:["There only is one SICF node visible in the standard delivery: ",(0,i.jsx)(n.code,{children:"/ubc"}),". That's also why all the REST services starts with the prefix ",(0,i.jsx)(n.code,{children:"/ubc"}),".\nBasically the authentication details can be specified there as per standard. In a default setting, a caller has to specify BASIC authentication details.\nThere is no need for any additional authorization/configuration needed.\nYou can test your Requests in ",(0,i.jsx)(n.a,{href:"#open-api-specification--swagger-ui",children:"Swagger UI"})," and/or your preferred tool like Postman.\nThe usage of dedicated REST services can be further restricted:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:['It is possible to create additional "sub" SICF nodes below ',(0,i.jsx)(n.code,{children:"/ubc"}),". It has to match to your chosen REST path. So for example:\nYou can create a new SICF node ",(0,i.jsx)(n.code,{children:"template"})," below ",(0,i.jsx)(n.code,{children:"/ubc"})," to handle all requests going to ",(0,i.jsx)(n.code,{children:"/ubc/template/*"}),"\nThis can be useful if you want to configure different authorization details or other SICF configuration things. Please just consider to specify the same handler class as for ",(0,i.jsx)(n.code,{children:"/ubc"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Parameters for a SICF node in GUI configuration, just edit ",(0,i.jsx)(n.code,{children:"/ubc"})," node or its childs:\n",(0,i.jsx)(n.img,{alt:"Parameter for SICF node",src:t(97941).A+"",width:"1746",height:"838"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/UBC/CHECK_AUTH"})," (default not set)\nSet to ",(0,i.jsx)(n.code,{children:"X"}),", if you want to further secure every REST interface call by checking authorization for authorization object ",(0,i.jsx)(n.code,{children:"/UBC/REST"}),". (only checking the handler path in customizing)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/UBC/CHECK_CSRF"})," (default not set)\nSet to ",(0,i.jsx)(n.code,{children:"X"}),", if a CSRF check has to be made for every changing operation. A caller have to request a token with a ",(0,i.jsx)(n.a,{href:"#authentication-ubcauth",children:"previous GET call"}),".\nIn a M2M communication, where this product is mostly used, this does not makes too much sense. Therefore it is not activated by default.\nYou can find more details about Cross-site request forgery ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Cross-site_request_forgery",children:"for example here"}),"."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},45676:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/image_003-0918c1dbd8d9b65f196657a0f8bf8277.png"},95838:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/image_001-10783c55148a20a38b107c6aee48bee8.png"},97941:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/image_002-7a2dd5db3c0a64934fcce0c3fa05476c.png"}}]);
"use strict";(self.webpackChunkubc_services=self.webpackChunkubc_services||[]).push([[556],{144:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/figure_007-d40537e3c0b3b554c75628be444af180.png"},3974:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/figure_001-37bd4e43119ec1a515c7aaa4d075cc4a.png"},6393:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/figure_006-da19c7833e83f00c50284fb89ec3cfa5.png"},11062:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/figure_012-0a02e76808455cabd4974cbb0f68c87b.png"},13963:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/figure_004-df11c1d963bc96363c706464cd0626f2.png"},16503:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/figure_008-6affafefb4240b8e2b218fb4349123ed.png"},17006:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/figure_009-70b157944134efa9343f02805ad13911.png"},23458:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/figure_005-3fac1cb56a6848803843ed4a6e4a4198.png"},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var t=i(96540);const s={},a=t.createContext(s);function o(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:n},e.children)}},36388:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/figure_010-9919f906c9574f752bf4def9ad12533e.png"},52305:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"GDD/documentation","title":"CDS View Generation (GDD)","description":"Intro","source":"@site/docs/products/QPPD/GRO/GDD/documentation.md","sourceDirName":"GDD","slug":"/GDD/documentation","permalink":"/products/QPPD/GRO/GDD/documentation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"qppdGRO","previous":{"title":"Overview","permalink":"/products/QPPD/GRO/"},"next":{"title":"Data Element Generation (GDE)","permalink":"/products/QPPD/GRO/GDE/documentation"}}');var s=i(74848),a=i(28453);const o={},r="CDS View Generation (GDD)",c={},d=[{value:"Intro",id:"intro",level:2},{value:"Technical Overview",id:"technical-overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Integrations",id:"integrations",level:2},{value:"CDS based Data Extraction",id:"cds-based-data-extraction",level:3},{value:"OData Exposure",id:"odata-exposure",level:3},{value:"RAP Generation",id:"rap-generation",level:3}];function l(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"cds-view-generation-gdd",children:"CDS View Generation (GDD)"})}),"\n",(0,s.jsx)(n.h2,{id:"intro",children:"Intro"}),"\n",(0,s.jsx)(n.p,{children:"Creating and utilizing Core Data Services (CDS) Views for generating a customer's data model within the SAP system is crucial for achieving a highly efficient and adaptable landscape. The importance of this process cannot be overstated, as it brings together flexible data modeling through QPPD customizing with the establishment of a robust data model and business layer."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Flexibility in Data Modeling via QPPD Customizing",(0,s.jsx)(n.br,{}),"\n","QPPD customizing provides a powerful and flexible environment for data modeling. This allows for tailoring data structures to the specific needs of the organization, ensuring that the data model accurately reflects the business requirements. The customizing stays as flexible as it is, without any limitations modelling your objects."]}),"\n",(0,s.jsxs)(n.li,{children:["Establishment of a Data Model/Business Layer",(0,s.jsx)(n.br,{}),"\n","The creation of a comprehensive data model and business layer is the foundation for building a unified and coherent system. This layer acts as the cornerstone for various applications and functionalities within the SAP ecosystem. Let's have a famous example: Just like standard SAP's view ",(0,s.jsx)(n.code,{children:"I_Product"})," you can establish a view to your newly created object modelled and maintained in QPPD."]}),"\n",(0,s.jsxs)(n.li,{children:["Typed APIs",(0,s.jsx)(n.br,{}),"\n","CDS Views provide the basis for creating Typed APIs, ensuring a standardized and strongly typed interface for communication between different applications and services. This results in enhanced reliability, maintainability, and ease of integration."]}),"\n",(0,s.jsxs)(n.li,{children:["Critical for UI5 Apps Development",(0,s.jsx)(n.br,{}),"\n","CDS Views are essential for developing SAP UI5 applications. It provides a standardized and consistent data structure, enabling seamless integration between the frontend and backend. This ensures a superior user experience and facilitates efficient application development. CDS Views and, more concrete, generated Interface Views for your QPPD objects lays the foundation for an efficient App development."]}),"\n",(0,s.jsxs)(n.li,{children:["Data Querying and Analytics",(0,s.jsx)(n.br,{}),"\n",'CDS Views enable efficient and optimized data querying and analysis. Users can extract relevant information easily, build their own Queries and even make use of SAPs standard Data extraction for BI/SAC/... "CDS based data extraction". No more custom code to have your QPPD data in Analytics tools!']}),"\n",(0,s.jsxs)(n.li,{children:["State-of-the-Art Integration within SAP",(0,s.jsx)(n.br,{}),"\n","Leveraging CDS Views aligns with the state-of-the-art practices within SAP. It ensures that the customer's data model in QPPD is in sync with the latest advancements in technology, making it future-proof and compatible with evolving SAP standards."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"In conclusion, the generation of CDS Views for building a customer's data model based on QPPD Specifications is not just a best practice; it is a strategic imperative. It empowers organizations to harness the full potential of QPPD by providing a solid foundation for application development, data analysis, and seamless integration. The adaptability and efficiency gained through this approach are essential for staying competitive and agile in today's dynamic business environment."})}),"\n",(0,s.jsx)(n.h2,{id:"technical-overview",children:"Technical Overview"}),"\n",(0,s.jsxs)(n.p,{children:["CDS Views for QPPD Specifications gets administrated in our very own Workbench called ",(0,s.jsx)(n.code,{children:"/MXP/QP_GDD"})," (transaction). As this is an UI5 App you can also start GDD using the following information: ",(0,s.jsx)(n.img,{alt:"Target Mapping GDD",src:i(36388).A+"",width:"1286",height:"391"}),'\nThe generated CDS Views are expected to be "generated only" and act as the very first foundation layer (Interface View) in your system representing the QPPD object. No extensions are allowed directly. Instead, make use of View extensions to model your custom relations like "Association from your Demand Specification to Sales Order Item". A Root View will be assigned to a Specification Type in QPPD.',(0,s.jsx)(n.br,{}),"\n",'You are free to use this first layer in every application you need, the best practice is to just wrap it in more layers dedicated to your use case "consumption layer".\nConsider reading the following link for an introduction into ',(0,s.jsx)(n.a,{href:"https://help.sap.com/docs/SAP_S4HANA_ON-PREMISE/ee6ff9b281d8448f96b4fe6c89f2bdc8/0a875bc7a005465aad92c08becc11776.html?locale=en-US",children:"CDS VDM Layers"}),'. The generated views are of category "interface" and therefore should be prefixed with ',(0,s.jsx)(n.code,{children:"I_"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"success",children:(0,s.jsx)(n.p,{children:"Model once, use it anywhere."})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example use case"})}),"\n",(0,s.jsx)(n.mermaid,{value:"%%{init: {'theme':'neutral'}}%%\nerDiagram\n    DS[DemandSpecification]\n    DSI[Schedule]\n    DST[Testing]\n    DSE[DemandSepcificationExtension]\n    SOI[SalesOrderItem]\n    SO[SalesOrder]\n    CSV[ConsumptionView]\n\n    DS ||--o{ DSI : has\n    DS ||--o{ DST : has\n    DS ||--|| DSE : extendedBy\n    DS ||--|| SOI : assignedTo\n    SOI }|--|| SO : assignedTo\n    CSV o{--o{ DS : uses"}),"\n",(0,s.jsx)(n.p,{children:"Explanation:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DemandSpecification"})," is the root CDS View ",(0,s.jsx)(n.strong,{children:"generated"})," for a Specification Type in QPPD, here: ",(0,s.jsx)(n.code,{children:"DemandSpecification"})," linked to the SAP standard ",(0,s.jsx)(n.code,{children:"SalesOrderItem"})]}),"\n",(0,s.jsxs)(n.li,{children:["In QPPD, for ",(0,s.jsx)(n.code,{children:"DemandSpecification"})," there are modelled childs ",(0,s.jsx)(n.code,{children:"Testing"})," and ",(0,s.jsx)(n.code,{children:"Schedule"})," ",(0,s.jsx)(n.strong,{children:"generated"})," for a ",(0,s.jsx)(n.code,{children:"DemandSpecification"}),". The generated root view also has associations to the generated views ",(0,s.jsx)(n.code,{children:"Testing"})," and ",(0,s.jsx)(n.code,{children:"Schedule"})," which makes it very easy to consume that later."]}),"\n",(0,s.jsxs)(n.li,{children:["Optionally, you can also add some custom logic/expressions and/or associations to the generated views ",(0,s.jsx)(n.code,{children:"DemandSpecification"}),", ",(0,s.jsx)(n.code,{children:"Schedule"})," or ",(0,s.jsx)(n.code,{children:"Testing"})," through View Extension. Here: adding an extension view for ",(0,s.jsx)(n.code,{children:"DemandSpecification"})," adding an association to ",(0,s.jsx)(n.code,{children:"SalesOrderItem"}),".\n",(0,s.jsx)(n.img,{alt:"Example Extension",src:i(16503).A+"",width:"889",height:"105"})]}),"\n",(0,s.jsxs)(n.li,{children:["You can then consume ",(0,s.jsx)(n.code,{children:"DemandSpecification"})," in your custom consumption view just reusing the fields and modelled associations having access to all the involved objects."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"Never change the generated views manually, as they may be overwritten with a new generation. Always add custom fields/assocations with View Extensions."})}),"\n",(0,s.jsxs)(n.p,{children:["One Root CDS View and many subsequent CDS views gets generated for a Specification Type (",(0,s.jsx)(n.code,{children:"/SCT/QP_C25"}),"). Once generated, the Root CDS View gets linked automatically to the Specification Type via customizing.",(0,s.jsx)(n.br,{}),"\n","Please note, that you cannot see the View linked to a Specification Type directly in ",(0,s.jsx)(n.code,{children:"/SCT/QP_C25"})," as the field is an extension (",(0,s.jsx)(n.code,{children:"/SCT/QP_TVART-/MXP/DDLNAME"}),"):",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.img,{alt:"Specification Extension Customizing with example View",src:i(64052).A+"",width:"1487",height:"969"})]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Open transaction ",(0,s.jsx)(n.code,{children:"/MXP/QP_GDD"})," or the App directly from the Fiori Launchpad\n",(0,s.jsx)(n.img,{alt:"Selection Screen",src:i(13963).A+"",width:"1667",height:"894"}),"\nOn the first screen you will find an overview of all Specification types and can see to which one already a View is linked. You can also see information about last generation, if any."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Go to the details of one Specification Type",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.img,{alt:"Details Specification Type before Generation",src:i(23458).A+"",width:"1614",height:"724"}),(0,s.jsx)(n.br,{}),"\n","You will find information about:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The assigned CDS View, if yet one"}),"\n",(0,s.jsx)(n.li,{children:"Regeneration needed -> anything changed in the Specification Customizing which results in different Views? (e.g., Element added)"}),"\n",(0,s.jsx)(n.li,{children:"Admin Data for the View Generation"}),"\n",(0,s.jsx)(n.li,{children:"View Hierarchy for this Specification Type including information about where changes will be required"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:['Start the Generation with \u201eEdit\u201c -> a new "Draft" will be opened. You will work on this Draft, complete it, and once you Save it the (Re) Generation will be done.\n',(0,s.jsx)(n.img,{alt:"Generation Input",src:i(6393).A+"",width:"1655",height:"816"}),"\nAs we will generate Artifacts and link to Customizing Tables, you are forced to specify Information in section ",(0,s.jsx)(n.strong,{children:"Configuration"})," like:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["View Section","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Prefix",(0,s.jsx)(n.br,{}),"\n","All your Views gets prefixed with this sequence. Every View Name is just a suggestion which needs to resolved in the workbench later on and can be adapted by you. This is necessary, as the Suggestions can be quite long and you need to chose logical abbreviations due to SAPs limitation of max. 30 characters."]}),"\n",(0,s.jsx)(n.li,{children:"Package\nEvery generated CDS View needs to be assigned to a Development Package in the system. Normally starting with Z or Y."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Elements Section\nAs every field in a CDS View needs a concrete type and we want to have semantically rich data models, there needs to be a Data Element for every used Element in your Specification type.\nYou can choose to either use the standalonde tool ",(0,s.jsx)(n.a,{href:"/products/QPPD/GRO/GDE/documentation",children:"Data Element Generation (GDE)"})," or just use the integration here to only generate used Elements. We recommend to use the integrated solution here.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Prefix\nSame as in ",(0,s.jsx)(n.a,{href:"/products/QPPD/GRO/GDE/documentation",children:"Data Element Generation (GDE)"}),". Every Data Element gets prefixed, the following pattern applies ",(0,s.jsx)(n.code,{children:"<<ddic_prefix>>_<<element_name>>"})]}),"\n",(0,s.jsx)(n.li,{children:"Package\nEvery generated Data Element needs to be assigned to a Development Package in the system. Normally starting with Z or Y."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Transports Section","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Workbench Request\nAs we generate Artifacts which needs to be transported, this is simply for specifying a Transport Request the changes will be recorded."}),"\n",(0,s.jsxs)(n.li,{children:["Customizing Request",(0,s.jsx)(n.br,{}),"\n","to save the link between QPPD Specification type and Root CDS View."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["We recommend starting with the section ",(0,s.jsx)(n.strong,{children:"Configuration"}),", as changes for Prefix requires re-calculation of views and its errors in the section below. Changes might get lost."]})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In the Section ",(0,s.jsx)(n.strong,{children:"Views"})," you can see all involved Views which will be generated and Information like:"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"a Regeneration will be done on Save or not"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:'If there are any "Errors"\nAn Error itself identifies that something needs to be done with a View before a Generation can take place.\nPossible Errors are:'}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Entity name suggested => the suggestion needs to be actively approved"}),"\n",(0,s.jsx)(n.li,{children:"Names too long => Association/Element names needs to be adapted to meet CDS limitations"}),"\n",(0,s.jsx)(n.li,{children:"Missing Data Elements for QPPD Elements needs to be generated"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Error Resolution",src:i(144).A+"",width:"1675",height:"837"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"The overall goal is to resolve all Errors before Save. Having any Error left prevents from saving/(re) generating."})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsxs)(n.li,{children:['Once all errors were resolved, clicking on "Save" (re)generates all Views where a change was detected. The Draft will be completed automatically and you will be in display mode again. Activation messages will be shown in a Popup.',(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.img,{alt:"Finished Draft",src:i(92685).A+"",width:"1678",height:"772"}),(0,s.jsx)(n.br,{}),"\n","The link to your newly generated Root CDS View gets persisted in QPPD customizing table for Specification Type ",(0,s.jsx)(n.code,{children:"/SCT/QP_C25"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:['For troubleshooting purposes you will find a Button "Unlink", which essentially unlinks the Root View from the Specification Type in Customizing ',(0,s.jsx)(n.code,{children:"/SCT/QP_C25"}),". Please make sure the Views are not used in any other Objects, as the Deletion cannot succeed then.\n",(0,s.jsx)(n.img,{alt:"Unlink Root View",src:i(11062).A+"",width:"1022",height:"588"})]})}),"\n",(0,s.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,s.jsx)(n.p,{children:'Almost all functionalities of QPPD obect model are supported, even the very complex ones like "multi grid". Unfortunately there are very rare technical limitations which are mentioned below.'}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["as the view fields will be typed, Data Elements needs to be generated. The same as for the ",(0,s.jsx)(n.a,{href:"/products/QPPD/GRO/GDE/documentation",children:"Data Element Generation (GDE)"})," applies"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Due to limited ",(0,s.jsx)(n.code,{children:"CAST"}),' functionality in ABAP CDS Views, you need to tick the checkbox "save NUM table" while assigning an Object type to a Specification (',(0,s.jsx)(n.code,{children:"/SCT/QP_C25"})," or ",(0,s.jsx)(n.code,{children:"/SCT/QP_C30"}),") ",(0,s.jsx)(n.strong,{children:"if"})," you have any numeric Element assigned ",(0,s.jsx)(n.strong,{children:"and"}),' need to have that Element in your View. If "save NUM table" is active, every numeric Element (more precise: Elements with conversion type ',(0,s.jsx)(n.code,{children:"FLTP"})," or ",(0,s.jsx)(n.code,{children:"PMK"})," elements) gets persisted technically not even in ",(0,s.jsx)(n.code,{children:"/SCT/QP_VAL"}),"/",(0,s.jsx)(n.code,{children:"/SCT/QP_PMK"})," but also in ",(0,s.jsx)(n.code,{children:"/SCT/QP_NUM"}),". For the View Generator is is the possible to cast based on the numeric value and to generate also the fields for numeric Elements.\n",(0,s.jsx)(n.img,{alt:"save NUM table",src:i(3974).A+"",width:"1309",height:"529"})]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:'If "save NUM table" is not ticked, the numeric elements of an object type are skipped and not added to the generated views.'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["As references are basically supported and completely transparent for the users, there is an exception:",(0,s.jsx)(n.br,{}),"\n",'"Referencing on field level" is not supported, due to technical limitations in ABAP CDS Views.\n',(0,s.jsx)(n.img,{alt:"Object type Reference type",src:i(85181).A+"",width:"1265",height:"570"})]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:['The Object type is skipped for adding to the generated views, if the Reference type is "Referencing on field level" ',(0,s.jsx)(n.strong,{children:"AND"})," the Object type can have references as modelled in ",(0,s.jsx)(n.code,{children:"/SCT/QP_C25"})," hierarchy."]})}),"\n",(0,s.jsxs)(n.admonition,{type:"warning",children:[(0,s.jsx)(n.p,{children:"Please keep in mind, that leaving the field empty means the default for the technical type is used:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Default for ",(0,s.jsx)(n.code,{children:"TME"}),' is "Referencing on line level"']}),"\n",(0,s.jsxs)(n.li,{children:["Default for ",(0,s.jsx)(n.code,{children:"PMK"}),' is "Referencing on field level"']}),"\n"]})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"integrations",children:"Integrations"}),"\n",(0,s.jsx)(n.p,{children:"This section will grow with best practices and examples in the future.\nYou are free to use the CDS Views just as any other View in your application logic for querying data and for typed access to an object.\nIn the following we show various standard integration capabilities and an outlook:"}),"\n",(0,s.jsx)(n.h3,{id:"cds-based-data-extraction",children:"CDS based Data Extraction"}),"\n",(0,s.jsxs)(n.p,{children:["Basically the generated views can just be used in a Consumption View, just add the relevant annotations mentioned ",(0,s.jsx)(n.a,{href:"https://community.sap.com/t5/technology-blogs-by-sap/cds-based-data-extraction-part-i-overview/ba-p/13425314",children:"here"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"success",children:(0,s.jsx)(n.p,{children:"With configuring the Operational Data Provisioning (ODP) you can just use QPPD data in your BW/4HANA system without any additional effors in like developing custom connectors."})}),"\n",(0,s.jsx)(n.h3,{id:"odata-exposure",children:"OData Exposure"}),"\n",(0,s.jsxs)(n.p,{children:["Use your fresh generated views for QPPD objects for querying capabilities to QPPD in OData Services, previously generated CDS views can just be listed in the service definition and thus are exposed via OData. It's as simple as that, you only have to focus on your object model!\nThe APIs are readonly if no behaviour is specified. (for CRUD, adding business logic see section ",(0,s.jsx)(n.a,{href:"#rap-generation",children:"RAP"}),")."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["simply create a ",(0,s.jsx)(n.a,{href:"https://help.sap.com/docs/ABAP_PLATFORM_NEW/fc4c71aa50014fd1b43721701471913d/b09e4d53bfca4544a9f8910bcc2cd9d6.html",children:"Service Definition"})," and ",(0,s.jsx)(n.a,{href:"https://help.sap.com/docs/ABAP_PLATFORM_NEW/fc4c71aa50014fd1b43721701471913d/b58a3c27df4e406f9335d4b346f6be04.html",children:"Service Binding"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Add the CDS views you would like to expose to the Service Definition.\n",(0,s.jsx)(n.img,{alt:"Service Definition",src:i(17006).A+"",width:"470",height:"109"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:['Querying for a "Product Specification" or any other object is then as simple as that, following the OData conventions for filtering/sorting/...:\n',(0,s.jsx)(n.a,{href:"https://sap_endpoint/sap/opu/odata/sap/ZQPPD_API_DEMO_R_O2/ProdSpec?$top=10&$filter%3DProductForm%20eq%20%27COIL%27",children:"https://<<sap_endpoint>>/sap/opu/odata/sap/ZQPPD_API_DEMO_R_O2/ProdSpec?$top=10&$filter=ProductForm eq 'COIL'"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"rap-generation",children:"RAP Generation"}),"\n",(0,s.jsx)(n.p,{children:'As the generated views are completely RAP compatible you can just use the generated views as a basis "interface" layer below the RAP layers to add behavior.\nThere is more to come, in the future we will provide RAP/Behavior Generators. It is also planned to provide UI5 generators on top of that.'})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},64052:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/figure_003-424178686925975a993f5bac30a5c33c.png"},85181:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/figure_002-021070c6a1846939abef38169fd79be2.png"},92685:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/figure_011-e59b6368911a8b723dc2a6daa8c77118.png"}}]);